var Ds,
	Net,
	fs;
if (typeof exports !== 'undefined') {
	Net=require('net.js')
	fs=require('fs')
}
(function(){
	function create(id){
		var obj={
			id: id,
			parent: 0,
			genid: function(obj,pre,after){
				pre=pre || '';
				after=after || '';
				var id=pre+(new Date().getTime()+after);
				while(id in obj){
					id=pre+((new Date().getTime()+1)+after);
				}
				return id;
			},		
			add: function(data){
				var item=create();
				item.parent=this;
				if (typeof(data)=='string'){
					//item.id=this.genid(this,'item-');
					item.id=data;
					this[data]=item;
				} else {				
					item.id=this.genid(this,this.pre || 'item-')+'.ds';
					for(var key in data){
						item[key]=data[key];
					}
					this[data.name]=item;				
				}
				item.set();
			},
			rem: function(str){},
			get: function(get,many){
				many=many || 0;
				if(typeof(get)=='string'){
					var res=this[get];
				} else {
					var res=[],
						item;
					for(var key in this){
						item=this[key];
						if (get(item)){
							if (many==1){
								res=item;
								break;
							} else {
								res.push(item);
								if(res.length==many) break;
							}							
						}
					}
				}					
				return res;
			},
			set: function(){		
				var obj={},
					plist=[],
					path,
					circular=['add','rem','get','set','genid','parent'];
				
				for(var key in this){
					if (circular.indexOf(key)==-1)
						obj[key]=this[key];
				}
				var tar=this;	
				while(tar.id){						
					plist.push(tar.id)
					tar=tar.parent;
				}
				plist.push('DS');
				plist=plist.reverse();
				path=plist.join('/');
				console.log('save me:',path,plist)
				data=JSON.stringify(obj)				
				
				if (typeof fs==='undefined'){
					//send to server
					Net.post(path+data,function(){
						console.log('data saved');
					})
				} else {
					//exists
					fs.exists(path, function (exists) {
						var cpath='',
							cp='';
						if (!exists){
							function mkdir(ph,pl,da){
								cp=pl.shift();								
								if (ph) {
									ph+='/'+cp;
								} else {
									ph=cp;
								}
								
								
								if (cp.indexOf('.ds')!=-1){
									fs.writeFile(ph,da,function(err){
										if (err) throw err;
									})										
								} else {
									fs.exists(ph, function (exists) {
										if (!exists){
											console.log('make dir:',ph);
											fs.mkdirSync(ph,function(err){})																															
										}
										if (pl.length) mkdir(ph,pl,da);
									})																		
								}
								return pl;
							}
							mkdir('',plist,data);
							/*
							for(var nr in plist){
								cp=plist[nr];
								if (nr==0) {
									cpath=cp;
								} else {
									cpath+='/'+cp
								}									
								fs.exists(cpath, function (exists) {
									if (!exists){
										console.log('make dir:',cpath);
										fs.mkdirSync(cpath,function(err){
											if (err) throw err;
										})
									}
								})								
							}
							/**/
						}
					});
					/**/
					//write
					/*
					name=this.id;
					
					fs.writeFile(name,data,function(err){
						if (err) throw err;
					})
					/**/
				}
			}
		}		
		return obj;
	}	
	Ds={
		open: function(id){
			obj=create(id)
			return obj;
		},
		close: function(){}
	}
	/*
	//test
	ds1=Ds.open('ds1');
	ds1.add('users')	
	ds1.users.pre='user-';
	
	ds1.users.add({
		name: 'User1',
		status: 'idle'
	})
	
	ds1.users.add({
		name: 'User2',
		status: 'idle'
	})
	ds1.users.add({
		name: 'User3',
		status: 'idle'
	})

	ds1.add('pages')	
	ds1.pages.pre='page-';
	ds1.pages.add({
		name: 'Page1',
		content: 'Hello world'
	})	
	/*
	ds1.get('users')
	var user=ds1.users.get(function(i){
		if (i.status=='idle') return true;
		return false;
	},1)
	user.name='New name';
	console.log('user:',user);
	user.set();	
	/**/
})()	
if (typeof exports !== 'undefined') exports.Ds =Ds;
console.log('Loaded Ds');
