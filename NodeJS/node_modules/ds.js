var ds,
	dnet,
	fs,
	inmemory=1;
if (typeof exports !== 'undefined') {
	dnet=require('dnet.js')	
	fs=require('fs')
	inmemory=0
}
(function(){
	ds={
		id: 'ds',
		path: 'ds',
		type: 'ds',
		items:{},
		conds: {
			'==': function(v1,v2){
				if (v1==v2) return true;
				return false;
			},
			'!=': function(v1,v2){
				if (v1!=v2) return true;
				return false;
			},
			'<': function(v1,v2){
				if (v1<v2) return true;
				return false;
			},
			'>': function(v1,v2){
				if (v1>v2) return true;
				return false;
			}
		},
		count: 0,
		'new': function(id,inmem,con){
			var obj=Obj();
			obj.id=id;
			obj.path='ds/'+id;
			obj.type='ds';
			obj.ds=obj;
			obj.con=con || false;			
			if (!inmemory) {
				obj.inmemory=inmem || 0;
			} else {
				obj.inmemory=inmemory;
			}
			if (obj.inmemory==0){
				//console.log('save:',obj.path)
				obj.set();
			}
			//console.log('new ds:',obj.path);
			return obj;
		},		
		add: function(data){
			//post
			//add  mem
			//save file
			if (this.con){
				var sdata={
					path: this.path,
					data: data
				}
				//console.log('send add to server:','ds.add '+JSON.stringify(sdata));
				
				/*
				console.log(net.net.post);				
				var post='ds/add/'+this.ds.id+'/?'+JSON.stringify(sdata),
					res=net.post(post);
				/**/
				
			} else {
				var item=Obj(data);			
				if (item.id=='') item.id=this.genid()
				item.path=this.path+'/'+item.id;
				item.parent=this;
				if (this.pre){
					item.ext='.json';
					delete item.items;
				}
				item.ds=this.ds;
				this.items[item.id]=item;
				this.count+=1;		
				if (item.ds.inmemory==0){				
					item.set();
				}
				return item;			
			}
		},
		rem: function(data){
			//post
			//rem mem
			//unlink file
			
			if (data){				
				var item=this.items[data];
				if (item){
					delete this.items[data];
					this.count-=1;
					return item;
				}
			} else {
				if (this.ds.inmemory==0){
					fs.unlink(this.path+this.ext,function(err){
						if(err) throw err;
					});					
				}									
				delete this.parent.items[this.id];
			}
			return false;
		},
		get: function(str){
			//post
			//get mem
			//get file
		
			console.log('get:',str);
			var res=[],
				cond,
				item;
			if (!str){
				res=this.items;
			} else {			
				for (var name in ds.conds){
					cond=name;
					if (str.indexOf(name)!=-1) break;
					cond='';
				}			
				if (!cond) {
					res=this.items[str];
				} else {
					var vals=str.split(cond);
					for (var key in this.items){
						item=this.items[key];
						if (ds.conds[cond](item[vals[0]],vals[1])){
							res.push(item);
						}
					}					
				}
			}
			return res;
		},
		set: function(){
			//post
			//save mem
			//save file
		
			var obj={},
				plist=[],
				path,
				circular=['add','rem','get','set','genid','new','open','close','parent','save','ds0','pre','count','path','ext'],
				data;
			for(var key in this){				
				if (circular.indexOf(key)==-1)
					obj[key]=this[key];
			}		
			data=JSON.stringify(obj)
			//console.log('save:',obj.path);			
			
			var parts=this.path.split('/'),
				cp='',
				last=parts.length-1;
			for(var nr in parts){				
				if (nr==last && this.ext){
					cp+='/'+parts[nr]+this.ext;
					fs.writeFile(cp,data,function(err){
						if (err) throw err;
					})
				} else {
					if (nr==0){
						cp+=parts[nr];
					} else {
						cp+='/'+parts[nr];
					}					
					console.log('mkdir:',cp);
					if (!fs.existsSync(cp)){
						console.log('mkdir:',cp);
						fs.mkdirSync(cp,function(err){
							if (err) throw err;
						})
					}
				}
			}			
		},
		genid: function(pre,after){
			pre=pre || '';
			after=after || '';
			var id=this.pre+(new Date().getTime()+after);
			//console.log('genid:',this,this.items);
			while(id in this.items){
				id=this.pre+((new Date().getTime()+1)+after);
			}
			return id;
		}	
	}
	function Obj(conf){
		var obj={
			id: '',
			pre: '',
			ext: '',
			path: '',
			parent: 0,
			ds:'',
			items: {},
			count: 0,
			add: ds.add,
			rem: ds.rem,
			get: ds.get,
			set: ds.set,
			genid: ds.genid
		}
		for(var key in conf){
			obj[key]=conf[key];
		}		
		return obj;
	}	
	
})()	
if (typeof exports !== 'undefined') exports.ds=ds;
console.log('loaded ds');
