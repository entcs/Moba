var ds,
	dnet,
	fs,
	inmemory=1;
(function(){
	var isclient=1;
	if (typeof exports !== 'undefined') {
		dnet=require('dnet.js')	
		fs=require('fs')
		inmemory=0
		isclient=0
	}
	ds={
		id: 'ds',
		path: 'ds',
		type: 'ds',
		isclient: isclient,
		stores:{},
		conds: {
			'==': function(v1,v2){
				if (v1==v2) return true;
				return false;
			},
			'!=': function(v1,v2){
				if (v1!=v2) return true;
				return false;
			},
			'<': function(v1,v2){
				if (v1<v2) return true;
				return false;
			},
			'>': function(v1,v2){
				if (v1>v2) return true;
				return false;
			}
		},
		dirname: '',
		handler: function(req,res){			
			var p=req.url.split('/')[1],
				s,
				c;			
				
			p=p.split('(');			
			
			//scope
			s=p[0].split('.')
			s.shift()
			//command
			c=s.pop();			
			//args
			a=p[1].split(')')[0];
			console.log('ds:',s,c,a);
			switch(c){
				case 'add':
					var obj=ds.stores,
						name;
					
					for(var nr in s){
						name=s[nr];
						if(!obj[name]){
							obj[name]={}							
						}
						obj=obj[name];
					}
					console.log(ds.stores,obj);
					
					break;
				case 'rem':
					break;
				case 'get':
					var obj=ds.stores,
						name;
					
					for(var nr in s){
						name=s[nr];
						if(!obj[name]){
							obj[name]={}							
						}
						obj=obj[name];
					}
					console.log(ds.stores,obj);	
					break;
				case 'set':
				
					break;
			}
			
			
			
			res.writeHead(200);
			res.end('datastore command:'+req.url.substring(1));												
		},
		add: function(name){
			ds.stores[name]={
				name: name,
				add: function(name){
					var cds=this;
					this.sets[name]={
						name: name,
						add: function(item){
							var id=item.id || ds.genid(this.items)
							this.items[id]=item;
							return this.items[id];
						},
						rem: function(args){
							if (args){
								var cond,fn,attr,val;
								for(var key in ds.conds){
									if(args.indexOf(key)!=-1) {
										cond=key;
										args=args.split(cond);
										fn=ds.conds[key];
										break;
									}
								}
								if (cond){
									var item;
									for(var key in this.items){
										item=this.items[key];
										if(fn(item[args[0]],args[1])){
											delete this.items[key];
										}
									}
									
								} else {
									delete this.items[args]
								}
							} else {
								delete cds.sets[this.name]
							}
							
						},
						get: function(args){
							var q=[];
							if (args){
								var cond,fn,attr,val;
								for(var key in ds.conds){
									if(args.indexOf(key)!=-1) {
										cond=key;
										args=args.split(cond);
										fn=ds.conds[key];
										break;
									}
								}
								if (cond){
									var item;
									for(var key in this.items){
										item=this.items[key];
										if(fn(item[args[0]],args[1])){
											q.push(item);
										}
									}
									
								} else {
									q=this.items[args];
								}
							} else {
								var item;
								for(var key in this.items){
									item=this.items[key];
									q.push(item);
								}
							}						
							return q;
						},
						set: function(){},
						items:{}
					}
					return this.sets[name];
				},
				rem: function(){
					delete ds.stores[this.name];
				},
				get: function(){},
				set: function(){},
				sets:{}
			}
			if (!isclient){
				//write to disk
			}
			return ds.stores[name];
		},
		open: function(){},
		//rem: function(){},
		//get: function(){},
		//set: function(){},		
		genid: function(items,pre,after){
			pre=pre || '';
			after=after || '';
			var id=pre+(new Date().getTime()+after);
			while(id in items){
				id=pre+((new Date().getTime()+1)+after);
			}
			return id;
		}	
	}	
})()	
if (typeof exports !== 'undefined') {
	for(var key in ds){
		exports[key]=ds[key];
	}
}
console.log('loaded ds');
